#Related to TrackedEntityInstance
CREATE TABLE TrackedEntityInstance_temp (_id INTEGER PRIMARY KEY AUTOINCREMENT, uid TEXT NOT NULL UNIQUE, created TEXT, lastUpdated TEXT, createdAtClient TEXT, lastUpdatedAtClient TEXT, organisationUnit TEXT, trackedEntityType TEXT, geometryType TEXT, geometryCoordinates TEXT, state TEXT, FOREIGN KEY (organisationUnit) REFERENCES OrganisationUnit (uid) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED, FOREIGN KEY (trackedEntityType) REFERENCES TrackedEntityType (uid) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED);
INSERT INTO TrackedEntityInstance_temp (_id, uid, created, lastUpdated, createdAtClient, lastUpdatedAtClient, organisationUnit, trackedEntityType, geometryType, geometryCoordinates, state) SELECT _id, uid, created, lastUpdated, createdAtClient, lastUpdatedAtClient, organisationUnit, trackedEntityType, CASE WHEN coordinates IS NOT NULL THEN CASE WHEN LENGTH(coordinates) - LENGTH( REPLACE ( coordinates, ',', '')) = 1 THEN 'POINT' ELSE CASE WHEN LENGTH(coordinates) - LENGTH( REPLACE ( coordinates, '[[[[', '')) = 0 THEN 'POLYGON' ELSE 'MULTI_POLYGON' END END ELSE NULL END, CASE WHEN coordinates IS NOT NULL THEN coordinates ELSE NULL END, state FROM TrackedEntityInstance;
DROP TABLE IF EXISTS TrackedEntityInstance;
ALTER TABLE TrackedEntityInstance_temp RENAME TO TrackedEntityInstance;

#Related to Program
CREATE TABLE Program_temp (_id INTEGER PRIMARY KEY AUTOINCREMENT, uid TEXT NOT NULL UNIQUE, code TEXT, name TEXT, displayName TEXT, created TEXT, lastUpdated TEXT, shortName TEXT, displayShortName TEXT, description TEXT, displayDescription TEXT, version INTEGER, onlyEnrollOnce INTEGER, enrollmentDateLabel TEXT, displayIncidentDate INTEGER, incidentDateLabel TEXT, registration INTEGER, selectEnrollmentDatesInFuture INTEGER, dataEntryMethod INTEGER, ignoreOverdueEvents INTEGER, relationshipFromA INTEGER, selectIncidentDatesInFuture INTEGER, useFirstStageDuringRegistration INTEGER, displayFrontPageList INTEGER, programType TEXT, relationshipType TEXT, relationshipText TEXT, relatedProgram TEXT, trackedEntityType TEXT, categoryCombo TEXT, accessDataWrite INTEGER, expiryDays INTEGER, completeEventsExpiryDays INTEGER, expiryPeriodType TEXT, minAttributesRequiredToSearch INTEGER, maxTeiCountToReturn INTEGER, featureType TEXT, FOREIGN KEY (relationshipType) REFERENCES RelationshipType (uid) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED, FOREIGN KEY (trackedEntityType) REFERENCES TrackedEntityType (uid) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED, FOREIGN KEY (categoryCombo) REFERENCES CategoryCombo (uid) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED);
INSERT INTO Program_temp (_id, uid, code, name, displayName, created, lastUpdated, shortName, displayShortName, description, displayDescription, version, onlyEnrollOnce, enrollmentDateLabel, displayIncidentDate, incidentDateLabel, registration, selectEnrollmentDatesInFuture, dataEntryMethod, ignoreOverdueEvents, relationshipFromA, selectIncidentDatesInFuture, useFirstStageDuringRegistration, displayFrontPageList, programType, relationshipType, relationshipText, relatedProgram, trackedEntityType, categoryCombo, accessDataWrite, expiryDays, completeEventsExpiryDays, expiryPeriodType, minAttributesRequiredToSearch, maxTeiCountToReturn, featureType) SELECT   _id, uid, code, name, displayName, created, lastUpdated, shortName, displayShortName, description, displayDescription, version, onlyEnrollOnce, enrollmentDateLabel, displayIncidentDate, incidentDateLabel, registration , selectEnrollmentDatesInFuture, dataEntryMethod, ignoreOverdueEvents, relationshipFromA, selectIncidentDatesInFuture, useFirstStageDuringRegistration, displayFrontPageList, programType, relationshipType, relationshipText, relatedProgram, trackedEntityType, categoryCombo, accessDataWrite, expiryDays, completeEventsExpiryDays, expiryPeriodType, minAttributesRequiredToSearch, maxTeiCountToReturn, featureType FROM Program;
DROP TABLE IF EXISTS Program;
ALTER TABLE Program_temp RENAME TO Program;

#Related to TrackedEntityType
ALTER TABLE TrackedEntityType ADD COLUMN featureType TEXT;

#Related to ProgramStage
CREATE TABLE ProgramStage_temp (_id INTEGER PRIMARY KEY AUTOINCREMENT, uid TEXT NOT NULL UNIQUE, code TEXT, name TEXT, displayName TEXT, created TEXT, lastUpdated TEXT, executionDateLabel TEXT, allowGenerateNextVisit INTEGER, validCompleteOnly INTEGER, reportDateToUse TEXT, openAfterEnrollment INTEGER, repeatable INTEGER, formType TEXT, displayGenerateEventBox INTEGER, generatedByEnrollmentDate INTEGER, autoGenerateEvent INTEGER, sortOrder INTEGER, hideDueDate INTEGER, blockEntryForm INTEGER, minDaysFromStart INTEGER, standardInterval INTEGER, program TEXT NOT NULL, periodType TEXT, accessDataWrite INTEGER, remindCompleted INTEGER, description TEXT, displayDescription TEXT, featureType TEXT, FOREIGN KEY (program) REFERENCES Program (uid) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED);
INSERT INTO ProgramStage_temp (_id, uid, code, name, displayName, created, lastUpdated, executionDateLabel, allowGenerateNextVisit, validCompleteOnly, reportDateToUse, openAfterEnrollment, repeatable, formType, displayGenerateEventBox, generatedByEnrollmentDate, autoGenerateEvent, sortOrder, hideDueDate, blockEntryForm, minDaysFromStart, standardInterval, program, periodType, accessDataWrite, remindCompleted, description, displayDescription, featureType) SELECT _id, uid, code, name, displayName, created, lastUpdated, executionDateLabel, allowGenerateNextVisit, validCompleteOnly, reportDateToUse, openAfterEnrollment, repeatable, formType, displayGenerateEventBox, generatedByEnrollmentDate, autoGenerateEvent, sortOrder, hideDueDate, blockEntryForm, minDaysFromStart, standardInterval, program, periodType, accessDataWrite, remindCompleted, description, displayDescription, featureType FROM ProgramStage;
DROP TABLE IF EXISTS ProgramStage;
ALTER TABLE ProgramStage_temp RENAME TO ProgramStage;

#Related to Enrollment
CREATE TABLE Enrollment_temp (_id INTEGER PRIMARY KEY AUTOINCREMENT, uid TEXT NOT NULL UNIQUE, created TEXT, lastUpdated TEXT, createdAtClient TEXT, lastUpdatedAtClient TEXT, organisationUnit TEXT NOT NULL, program TEXT NOT NULL, enrollmentDate TEXT, incidentDate TEXT, followup INTEGER, status TEXT, trackedEntityInstance TEXT NOT NULL, state TEXT, geometryType TEXT, geometryCoordinates TEXT, FOREIGN KEY (organisationUnit) REFERENCES OrganisationUnit (uid) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED, FOREIGN KEY (program) REFERENCES Program (uid) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED, FOREIGN KEY (trackedEntityInstance) REFERENCES TrackedEntityInstance (uid) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED);
INSERT INTO Enrollment_temp (_id, uid, created, lastUpdated, createdAtClient, lastUpdatedAtClient, organisationUnit, program, enrollmentDate, incidentDate, followup, status, trackedEntityInstance, state, geometryType, geometryCoordinates) SELECT _id, uid, created, lastUpdated, createdAtClient, lastUpdatedAtClient, organisationUnit, program, enrollmentDate, incidentDate, followup, status, trackedEntityInstance, state, CASE WHEN longitude IS NOT NULL THEN 'POINT' ELSE NULL END, CASE WHEN longitude IS NOT NULL THEN '[' || longitude || ', ' || latitude || ']' ELSE NULL END FROM Enrollment;
DROP TABLE IF EXISTS Enrollment;
ALTER TABLE Enrollment_temp RENAME TO Enrollment;

#Related to Event
ALTER TABLE Event RENAME TO Event_temp;
CREATE TABLE Event (_id INTEGER PRIMARY KEY AUTOINCREMENT, uid TEXT NOT NULL UNIQUE, enrollment TEXT, created TEXT, lastUpdated TEXT, createdAtClient TEXT, lastUpdatedAtClient TEXT, status TEXT, geometryType TEXT, geometryCoordinates TEXT, program TEXT NOT NULL, programStage TEXT NOT NULL, organisationUnit TEXT NOT NULL, eventDate TEXT, completedDate TEXT, dueDate TEXT, state TEXT, attributeOptionCombo TEXT, FOREIGN KEY (program) REFERENCES Program (uid) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED, FOREIGN KEY (programStage) REFERENCES ProgramStage (uid) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED, FOREIGN KEY (enrollment) REFERENCES Enrollment (uid) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED, FOREIGN KEY (organisationUnit) REFERENCES OrganisationUnit (uid) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED, FOREIGN KEY (attributeOptionCombo) REFERENCES CategoryOptionCombo (uid) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED);
INSERT INTO Event (_id, uid, enrollment, created, lastUpdated, createdAtClient, lastUpdatedAtClient, status, geometryType, geometryCoordinates, program, programStage, organisationUnit, eventDate, completedDate, dueDate, state, attributeOptionCombo) SELECT _id, uid, enrollment, created, lastUpdated, createdAtClient, lastUpdatedAtClient, status, CASE WHEN longitude IS NOT NULL THEN 'POINT' ELSE NULL END, CASE WHEN longitude IS NOT NULL THEN '[' || longitude || ', ' || latitude || ']' ELSE NULL END, program, programStage, organisationUnit, eventDate, completedDate, dueDate, state, attributeOptionCombo FROM Event_temp;
DROP TABLE Event_temp;