/*
 * Copyright (c) 2016, University of Oslo
 *
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * Neither the name of the HISP project nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

apply plugin: "checkstyle"

checkstyle {
    toolVersion = "8.35"
    config = resources.text.fromFile("${projectDir}/plugins/checkstyle-style.xml")
    ignoreFailures = false
    showViolations false
}

afterEvaluate {
    android.libraryVariants.each { variant ->

        def compileTask

        if (variant.hasProperty('javaCompileProvider')) {
            // Android 3.3.0+
            compileTask = variant.javaCompileProvider.get()
        } else {
            compileTask = variant.javaCompile
        }

        def checkstyleTask = tasks.register("checkstyle${variant.name.capitalize()}", Checkstyle) {

            group = "verification"
            description = "Run Checkstyle for the ${variant.name}"

            include("**/*.java")
            exclude("**/R.java", "**/BuildConfig.java")

            source = 'src/main/java'
            classpath = compileTask.classpath.plus(project.files(android.bootClasspath))
        }

        checkstyleTask.get().dependsOn(compileTask)

        if (tasks.named("check")) {
            check.dependsOn(checkstyleTask)
        }
    }
}